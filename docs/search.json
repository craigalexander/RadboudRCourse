[{"path":"index.html","id":"overview","chapter":"1 Overview","heading":"1 Overview","text":"R programming language provides researchers access large range fully customisable data visualisation options, typically available point--click software. visualisations visually appealing, can increase transparency distribution underlying data, rather relying commonly used visualisations aggregations.introductory section course, provide practical introduction using R, particularly visualise data use throughout course. First, explain rationale behind using R data visualisation using ggplot2 package. package allow us begin common plotting outputs histograms boxplots, extend complex structures used within spatial data visualisation.","code":""},{"path":"index.html","id":"the-ggplot2-package","chapter":"1 Overview","heading":"1.1 The ggplot2 package","text":"host options data visualisation R. course, mainly use ggplot2 package, forms part larger tidyverse collection packages provide functions efficient data management R. also use eother packages within tidyverse course.grammar graphics standardised way describe components graphic. ggplot2 uses layered grammar graphics, plots bulit series layers. may helpful think picture multiple elements sit semi-transparently .\nFigure \\(\\ref{fig:layerplot}\\) shows evolution sumple scatterplot using layered approach. First, plot space built (layer 1); variables specified (layer 2); type visualisation desired variables specified (layer 3) - case geom_point()called visualise individual data points; second geom layer added include line best fit (layer 4); axis labels editied readability (layer 5) finally, theme applied change overall appearance plot (layer 6).\nFigure 1.1:  Evolution layered plot.\nlayer independent individually customisable. example, size, colour position component can adjusted. use layers makes easy build complex plots step--step, adapt extend plots existing code.","code":""},{"path":"index.html","id":"data","chapter":"1 Overview","heading":"1.2 Data","text":"course, use datasets analysis. can download following repository:Link repository","code":""},{"path":"index.html","id":"libraries","chapter":"1 Overview","heading":"1.3 Libraries","text":"Throughout week, use libraries within R modelling data visualisation. need following libraries installed version R:tidyverselubridatemagrittrMASSggmapplotlymgcvspsplinesgratiaspdepsfCARBayesCARBayesSTRColorBrewergridExtraleaflet","code":""},{"path":"intro.html","id":"intro","chapter":"2 Getting Started","heading":"2 Getting Started","text":"","code":""},{"path":"intro.html","id":"setting-up-r","chapter":"2 Getting Started","heading":"2.1 Setting up R","text":"need access R course. can download R free CRAN.R available Windows, Mac OS Linux well less common platforms.can download standard version R CRAN.","code":""},{"path":"intro.html","id":"downloading-and-installing-r-for-windows","chapter":"2 Getting Started","heading":"2.1.1 Downloading and installing R for Windows","text":"download Windows installer R, just enter following URL (click clink).https://cran.r-project.org//bin/windows/base/release.htmlThis download installer recent version R. Alternatively, can go main CRAN page, https://cran.r-project.org/, click “Download R Windows”, click “base” “Download R x.y.z Windows” (x.y.z current version number R).can run installer, accepting default settings.","code":""},{"path":"intro.html","id":"downloading-and-installing-r-for-mac","chapter":"2 Getting Started","heading":"2.1.2 Downloading and installing R for Mac","text":"download Windows installer Mac, just enter following URL (click clink).https://cran.r-project.org/bin/macosx/, select recent version R .pkg file automatically download. file form “R-x.y.z” (x.y.z current version number R).file opened, installer open can select default settings.","code":""},{"path":"intro.html","id":"rstudio","chapter":"2 Getting Started","heading":"2.2 RStudio","text":"recommended also download install RStudio Desktop, powerful integrated development environment (IDE) R. RStudio contains much better code editor. , example, syntax highlighting, .e. automatically display code different colours make easier quicker read code. Even though IDEs, Eclipse, Visual Studio Code, Emacs can also used R, RStudio far popular among R users.RStudio just front-end R, able make use RStudio, need also R installed.RStudio Desktop Open Source available free RStudio.","code":""},{"path":"intro.html","id":"installing-rstudio-for-windowsmac","chapter":"2 Getting Started","heading":"2.2.1 Installing RStudio for Windows/Mac","text":"Go tohttps://www.rstudio.com/products/rstudio/download/scroll section “installers”, click “RStudio-x-y-z.exe” first row table Windows install, click “RStudio-x-y-z.dmg” macOS install. start download RStudio installer.can run installer, accepting default settings (macOS, need drag drop application applications folder open).","code":""},{"path":"intro.html","id":"r-packages","chapter":"2 Getting Started","heading":"2.3 R packages","text":"R comes default selection packages, cover “basic needs” terms data management, data visualisation modelling. However, large selection “add-” R packages available CRAN, use course. can use R packages installed .Imagine want use R package called ggplot2 (use later course). order able use , first need install . can enteringinto R. download install package ggplot2, well packages ggplot uses.Alternatively, can click tab “Packages bottom-right panel, click ”Install”.\nFigure 2.1: Selecting installation menu installing packages\ncan enter name package want install click “Install”\nFigure 2.2: Installation menu packages\ninstalled R package, can load using function library","code":"\ninstall.packages(\"ggplot2\")\nlibrary(ggplot2)"},{"path":"efficient-data-management-in-r.html","id":"efficient-data-management-in-r","chapter":"3 Efficient Data Management in R","heading":"3 Efficient Data Management in R","text":"","code":""},{"path":"efficient-data-management-in-r.html","id":"tidyverse","chapter":"3 Efficient Data Management in R","heading":"3.1 Tidyverse","text":"Tidyverse collection R packages designed help data scientists make efficient use R. contains following packages (several , :tibble provides “modern reimagining” standard data.frame, R. Tibbles (tbl_dfs) flexible terms can store, (purposefully) less flexible terms “sloppy code”.readr provides alternative functions reading text data tabular form. provides faster consistent alternatives read.table read.csv.dplyr provides powerful suite functions data manipulation focus allowing clean simple code. look dplyr detail week.ggplot2 featureful systematic set plotting functions, focus tutorial.lubridate useful package handling dates times R. Dates times often tricky deal , lubridate provides many useful functions efficiently handling .","code":""},{"path":"efficient-data-management-in-r.html","id":"pipelines","chapter":"3 Efficient Data Management in R","heading":"3.2 Pipelines","text":"Pipelines centre tidyverse packages. R package magrittr provides forward-pipe operator R.Suppose function f defined RThen can apply f argument x usingThe forward-pipes magrittr allow us rewrite function call asinstead. advantage alternative notation might become immediately clear, advantage becomes obvious looking nested function calls.Consider R data set mtcars, contains data 1974 edition US magazine Motor Trend. Suppose want convert fuel consumption litres per 100 kilometres retain cars fuel economy better 10 litres per 100 kilometres.(wondering number 235.21 comes : US gallon roughly 3.785 litres mile roughly 1.609 kilometres, \\(\\frac{100\\times 3.785}{1.609}\\approx 235.21\\))want perform steps one go, can nest two calls within one another useThis gives exactly results, easy read understand. easy see argument lp100k<=10 belongs subset. nesting function calls, arguments get increasingly far function call belong.%>% operator however allows us write much cleanly:","code":"\nf <- function(x)\n  x^2\nx <- 3\nf(x)## [1] 9\nx %>% f## [1] 9\nmtcars2 <- transform(mtcars, lp100k=235.21/mpg)\nsubset(mtcars2, lp100k<=10)##                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb   lp100k\n## Merc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 9.639754\n## Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 7.259568\n## Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 7.737171\n## Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 6.938348\n## Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 8.615751\n## Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 9.046538\n## Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 7.737171\nsubset(transform(mtcars, lp100k=235.21/mpg), lp100k<=10)\nmtcars %>%\n  transform(lp100k=235.21/mpg) %>%\n  subset(lp100k<=10)"},{"path":"efficient-data-management-in-r.html","id":"task","chapter":"3 Efficient Data Management in R","heading":"3.2.1 Task","text":"R code uses pipelines. Convert nested function calls.","code":"\nrnorm(1000) %>% sin() %>% max()"},{"path":"efficient-data-management-in-r.html","id":"solution","chapter":"3 Efficient Data Management in R","heading":"3.2.2 Solution","text":"code generates random sample size 1000 (standard normal distribution), computes sine entry takes maximum.case nested function call easy read every function takes one argument.","code":"\nmax(sin(rnorm(1000)))## [1] 0.9999922"},{"path":"efficient-data-management-in-r.html","id":"task-1","chapter":"3 Efficient Data Management in R","heading":"3.2.3 Task","text":"Convert R code pipelines.","code":"\nlibrary(MASS)                       # Load package MASS, which contains the data\nsubset(transform(mammals, ratio=brain/body), ratio==max(ratio))"},{"path":"efficient-data-management-in-r.html","id":"answer","chapter":"3 Efficient Data Management in R","heading":"3.2.4 Answer","text":"can use following R code using pipelines.Oddly enough, ground squirrels higher brain--body weight ratio humans.","code":"\nlibrary(MASS)\nmammals %>%\n  transform(ratio=brain/body) %>%\n  subset(ratio==max(ratio))##                  body brain    ratio\n## Ground squirrel 0.101     4 39.60396"},{"path":"efficient-data-management-in-r.html","id":"additional-resources","chapter":"3 Efficient Data Management in R","heading":"3.2.5 Additional Resources","text":"Pipelines Data Analysis R\nHadley Wickham produced series excellent slides pipelines, covers much look tutorial.Background reading: Chapter 18 R Data Science\nChapter 18 R Data Science gives detailed overview pipes underpinning technology (though latter rather advanced).","code":""},{"path":"efficient-data-management-in-r.html","id":"tibbles","chapter":"3 Efficient Data Management in R","heading":"3.3 Tibbles","text":"package tibble provides tbl_df’s (“tibbles”, easier pronounce). modern take built-class data.frame.One key advantage tibbles can store anything. data.frame can store single value per “cell”, example number character string. However, tibble, can store list even another tibble cell. example tibble starwars package dplyr. column starships contains row list starships flown character (list different length depending character.)stored information data frame. either store information across several data frames stored list starships character string.","code":"\nlibrary(dplyr)                             # Load library dplyr which contains the data\nstarwars[,c(\"name\", \"starships\")]          # Print columns name and starships## # A tibble: 87 × 2\n##    name               starships\n##    <chr>              <list>   \n##  1 Luke Skywalker     <chr [2]>\n##  2 C-3PO              <chr [0]>\n##  3 R2-D2              <chr [0]>\n##  4 Darth Vader        <chr [1]>\n##  5 Leia Organa        <chr [0]>\n##  6 Owen Lars          <chr [0]>\n##  7 Beru Whitesun lars <chr [0]>\n##  8 R5-D4              <chr [0]>\n##  9 Biggs Darklighter  <chr [1]>\n## 10 Obi-Wan Kenobi     <chr [5]>\n## # … with 77 more rows\nstarwars[10,\"starships\"][[1]]              # Starships flown by Obi-Wan## [[1]]\n## [1] \"Jedi starfighter\"         \"Trade Federation cruiser\"\n## [3] \"Naboo star skiff\"         \"Jedi Interceptor\"        \n## [5] \"Belbullab-22 starfighter\""},{"path":"efficient-data-management-in-r.html","id":"creating-tibbles","chapter":"3 Efficient Data Management in R","heading":"3.3.1 Creating tibbles","text":"can create tibbles using function tibble. can create tibble usingIn words, function tibble assembles tibble column--column basis (akin using cbind).function tribble (“transposed tibble”) lets create tibble row--bow basis (akin using rbind), typically legible creating matrix code.","code":"\nkidstibble <- tibble(name=c(\"Sarah\", \"John\"), age=c(4,11), weight=c(15,28),\n                     height=c(101,132), gender=c(\"f\", \"m\"))\nkidstibble <- tribble(~name,   ~age, ~weight, ~height, ~gender,\n                      \"Sarah\",    4,      15,     101,     \"f\",\n                      \"John\",    11,      28,     132,     \"m\")"},{"path":"efficient-data-management-in-r.html","id":"working-with-tibbles","chapter":"3 Efficient Data Management in R","heading":"3.3.2 Working with tibbles","text":"Variables/Columns can accessed added using tibble$varname (varname needs fully spelled ). can also access column using tibble[,\"varname\"] tibble[[\"varname\"]].Rows can selected using tibble[rowindices,] (note use row names).Individual cells can accessed using tibble[rowindices, colindices].","code":""},{"path":"efficient-data-management-in-r.html","id":"subsetting-tibbles-always-results-in-a-tibble","chapter":"3 Efficient Data Management in R","heading":"3.3.3 Subsetting tibbles always results in a tibble","text":"Tibbles also consistent. Subsetting tibbles always results tibble.contrast, subsetting data frame matrix guaranteed result data frame matrix (unless use drop=FALSE). result single column row, subsetting data frame matrix results vector.“dropping” dimension can useful using R interactively, can source many issues complex projects, programmers incorrectly assume subsetting data frame matrix always result another data frame matrix, rather possibly just vector (thus good idea always use drop=FALSE working data frames matrices complex projects).Data Import Cheat Sheet\nRStudio’s cheat sheet data import also covers tibbles.","code":"\nkidstibble[,1]                            # Result is a tibble## # A tibble: 2 × 1\n##   name \n##   <chr>\n## 1 Sarah\n## 2 John"},{"path":"efficient-data-management-in-r.html","id":"reading-in-data-using-readr","chapter":"3 Efficient Data Management in R","heading":"3.4 Reading in data using readr","text":"package readr contains alternatives functions read.table read.csv. alternative functions readr four main advantages.read data lot faster can show progress bar (though relevant really big data sets).store data straight tibble, rather data frame.allow specifying intended data type column thus make easier identify rows cause problems.less intrusive: don’t automatically convert character strings factors change column names (read.table read.csv example remove spaces variable names replace full stops). functions readr also guaranteed give result irrespective platform operating system run .readr provides following functions.read_csv reads comma-separated files. read_csv2 reads files semicolon-separated (common countries like France Germany, comma used decimal separator).read_tsv reads tab-separated files.read_delim general function (like read.table). delimiter specified using argument delim.read_fwd reads fixed-width files.functions assume first row contains column/variable names. case, set optional argument col_names FALSE character vector containing intended column names.strings used encode missing values can specified using optional argument na.example, can read file chol.txt usingNote functions readr show data type used column. makes easier spot mistakes like missing values coded expected, case numeric column show character string.example, can read file chol.csv using","code":"\nlibrary(readr)\nread_delim(\"chol.txt\", delim=\" \", col_names=c(\"ldl\", \"hdl\", \"trig\",\n                                              \"age\", \"gender\", \"smoke\"))## Rows: 13 Columns: 6\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \" \"\n## chr (2): gender, smoke\n## dbl (4): ldl, hdl, trig, age\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.## # A tibble: 13 × 6\n##      ldl   hdl  trig   age gender smoke    \n##    <dbl> <dbl> <dbl> <dbl> <chr>  <chr>    \n##  1   175    25   148    39 female no       \n##  2   196    36    92    32 female no       \n##  3   139    65    NA    42 male   <NA>     \n##  4   162    37   139    30 female ex-smoker\n##  5   140   117    59    42 female ex-smoker\n##  6   147    51   126    65 female ex-smoker\n##  7    82    81    NA    57 male   no       \n##  8   165    63   120    48 male   current  \n##  9   149    49    NA    32 female no       \n## 10    95    54   157    55 female ex-smoker\n## 11   169    59    67    48 female no       \n## 12   174   117   168    41 female no       \n## 13    91    52   146    69 female current\nlibrary(readr)\nread_csv(\"chol.csv\", na=\".\")## Rows: 13 Columns: 6\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (2): gender, smoke\n## dbl (4): ldl, hdl, trig, age\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.## # A tibble: 13 × 6\n##      ldl   hdl  trig   age gender smoke    \n##    <dbl> <dbl> <dbl> <dbl> <chr>  <chr>    \n##  1   175    25   148    39 female no       \n##  2   196    36    92    32 female no       \n##  3   139    65    NA    42 male   NA       \n##  4   162    37   139    30 female ex-smoker\n##  5   140   117    59    42 female ex-smoker\n##  6   147    51   126    65 female ex-smoker\n##  7    82    81    NA    57 male   no       \n##  8   165    63   120    48 male   current  \n##  9   149    49    NA    32 female no       \n## 10    95    54   157    55 female ex-smoker\n## 11   169    59    67    48 female no       \n## 12   174   117   168    41 female no       \n## 13    91    52   146    69 female current"},{"path":"efficient-data-management-in-r.html","id":"task-2","chapter":"3 Efficient Data Management in R","heading":"3.4.1 Task","text":"Read data files cars.csv ships.txt R using functions readr.","code":""},{"path":"efficient-data-management-in-r.html","id":"answer-1","chapter":"3 Efficient Data Management in R","heading":"3.4.2 Answer","text":"first line file cars.csv contains variable names fields separated commas. Missing values encoded asterisks.also used function read_delim.first line file ships.txt contains variable names fields separated whitespace. Missing values encoded “.”.","code":"\ncars <- read_csv(\"cars.csv\", na=\"*\")## Rows: 20 Columns: 5\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (2): Manufacturer, Model\n## dbl (3): MPG, Displacement, Horsepower\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\ncars## # A tibble: 20 × 5\n##    Manufacturer Model     MPG Displacement Horsepower\n##    <chr>        <chr>   <dbl>        <dbl>      <dbl>\n##  1 Chevrolet    Camaro     19          3.4        160\n##  2 Oldsmobile   Achieva    NA          2.3        155\n##  3 Dodge        Spirit     22          2.5        100\n##  4 Chevrolet    Astro      NA          4.3        165\n##  5 Chevrolet    Corsica    25          2.2        110\n##  6 Volkswagen   Corrado    18          2.8        178\n##  7 Dodge        Stealth    18          3          300\n##  8 Volkswagen   Fox        25          1.8         81\n##  9 Cadillac     DeVille    16          4.9        200\n## 10 Hyundai      Excel      29          1.5         81\n## 11 Toyota       Tercel     32          1.5         82\n## 12 Dodge        Colt       29          1.5         92\n## 13 Volkswagen   Passat     21          2          134\n## 14 Geo          Storm      30          1.6         90\n## 15 Toyota       Previa     18          2.4        138\n## 16 Nissan       Sentra     29          1.6        110\n## 17 Toyota       Celica     25          2.2        135\n## 18 Honda        Civic      42          1.5        102\n## 19 Dodge        Caravan    17          3          142\n## 20 Hyundai      Sonata     20          2          128\nread_delim(\"cars.csv\", delim=\",\", na=\"*\")## Rows: 20 Columns: 5\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (2): Manufacturer, Model\n## dbl (3): MPG, Displacement, Horsepower\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.## # A tibble: 20 × 5\n##    Manufacturer Model     MPG Displacement Horsepower\n##    <chr>        <chr>   <dbl>        <dbl>      <dbl>\n##  1 Chevrolet    Camaro     19          3.4        160\n##  2 Oldsmobile   Achieva    NA          2.3        155\n##  3 Dodge        Spirit     22          2.5        100\n##  4 Chevrolet    Astro      NA          4.3        165\n##  5 Chevrolet    Corsica    25          2.2        110\n##  6 Volkswagen   Corrado    18          2.8        178\n##  7 Dodge        Stealth    18          3          300\n##  8 Volkswagen   Fox        25          1.8         81\n##  9 Cadillac     DeVille    16          4.9        200\n## 10 Hyundai      Excel      29          1.5         81\n## 11 Toyota       Tercel     32          1.5         82\n## 12 Dodge        Colt       29          1.5         92\n## 13 Volkswagen   Passat     21          2          134\n## 14 Geo          Storm      30          1.6         90\n## 15 Toyota       Previa     18          2.4        138\n## 16 Nissan       Sentra     29          1.6        110\n## 17 Toyota       Celica     25          2.2        135\n## 18 Honda        Civic      42          1.5        102\n## 19 Dodge        Caravan    17          3          142\n## 20 Hyundai      Sonata     20          2          128\nships <- read_delim(\"ships.txt\", delim=' ' , na=\".\")## Rows: 40 Columns: 5\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \" \"\n## chr (1): type\n## dbl (4): year, period, service, incidents\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nships## # A tibble: 40 × 5\n##    type   year period service incidents\n##    <chr> <dbl>  <dbl>   <dbl>     <dbl>\n##  1 A        60     60     127         0\n##  2 A        60     75      63         0\n##  3 A        65     60      NA         3\n##  4 A        65     75    1095         4\n##  5 A        70     60    1512         6\n##  6 A        70     75    3353        18\n##  7 A        75     60       0         0\n##  8 A        75     75    2244        11\n##  9 B        60     60   44882        39\n## 10 B        60     75   17176        29\n## # … with 30 more rows"},{"path":"efficient-data-management-in-r.html","id":"specifying-column-types","chapter":"3 Efficient Data Management in R","heading":"3.4.3 Specifying column types","text":"functions readr allow specifying expected column types. especially important writing run automatically. provides easy way ensuring data provided expected format.easiest way specifying expected column types provide character string letters standing columnSo data file chol.csv expect first four columns integers latter two character strings, useSpecifying expected column types can help pinpointing problems reading data. Suppose forgotten missing values coded using “.” data file. use …… can see output trig read character string, know .However, use …… obtain warning can print problematic rows usingThe output problems shows us three rows (3, 7 9) data chol.csv expected format: value . compatible column numeric. makes easy identify cause problem (NAs coded “.”) rectify issue.","code":"\nchol <- read_csv(\"chol.csv\", na=\".\", col_types=\"iiiicc\")\nchol <- read_csv(\"chol.csv\")## Rows: 13 Columns: 6\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (3): trig, gender, smoke\n## dbl (3): ldl, hdl, age\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nchol <- read_csv(\"chol.csv\", col_types=\"iiiicc\")## Warning: One or more parsing issues, see `problems()` for details\nproblems(chol)## # A tibble: 3 × 5\n##     row   col expected   actual file                                            \n##   <int> <int> <chr>      <chr>  <chr>                                           \n## 1     4     3 an integer .      /Users/Craig/Library/CloudStorage/OneDrive-Shar…\n## 2     8     3 an integer .      /Users/Craig/Library/CloudStorage/OneDrive-Shar…\n## 3    10     3 an integer .      /Users/Craig/Library/CloudStorage/OneDrive-Shar…"},{"path":"efficient-data-management-in-r.html","id":"additional-resources-1","chapter":"3 Efficient Data Management in R","heading":"3.4.4 Additional Resources","text":"Data Import Cheat Sheet\nRStudio’s cheat sheet data import also covers readr.Background reading: Chapter 11 R Data Science\nChapter 11 R Data Science gives detailed overview functions readr. explains detail functions readr parse files. pipes also covers functions readr dead writing files.","code":""},{"path":"efficient-data-management-in-r.html","id":"efficient-data-manipulation-using-dplyr","chapter":"3 Efficient Data Management in R","heading":"3.5 Efficient data manipulation using dplyr","text":"section work data Paris’ Vélib’ bicycle sharing system available JCDecaux’s API open cycle data.data consists number bikes available number bike stands available every Vélib’ station, recorded every five minutes six hours Tuesday afternoon October 2017.data consists two tibbles. first, bikes contains data number available bikes stands station.second, stations contains additional information station.can load data R using","code":"\nlibrary(tibble)\nload(url(\"https://github.com/UofGAnalyticsData/R/raw/main/Week%204/velib\"))"},{"path":"efficient-data-management-in-r.html","id":"overview-the-key-functions-verbs-for-dplyr","chapter":"3 Efficient Data Management in R","heading":"3.5.1 Overview: the key functions (“verbs”) for dplyr","text":"functions dplyr designed used tibbles, also work data frames. invoked data frame, return data frame long possible.","code":""},{"path":"efficient-data-management-in-r.html","id":"selecting-observations-rows-using-filter-and-slice","chapter":"3 Efficient Data Management in R","heading":"3.5.2 Selecting observations (rows) using filter and slice","text":"","code":""},{"path":"efficient-data-management-in-r.html","id":"filter","chapter":"3 Efficient Data Management in R","heading":"3.5.2.1 filter","text":"function filter used select observations (rows) similar way base R function subset.Suppose want print bike stations Paris (rather départements Île de France)Note use double == test whether département equal “Paris”.can create complex expressions using standard logical operators & (“”), | (“”) ! (“”). Note use && || context, work scalar arguments.example, want extract stations Paris Hauts-de-Seine can useRather using logical used %%:Even though functions dplyr designed used pipelines, can also provide data set first argument:","code":"\nlibrary(dplyr)\nstations75 <- stations %>%\n                filter(departement==\"Paris\")\nstations75## # A tibble: 743 × 6\n##    name                                       id address   lng   lat departement\n##    <chr>                                   <dbl> <chr>   <dbl> <dbl> <chr>      \n##  1 PORT SOLFERINO (STATION MOBILE)           901 BERGES…  2.32  48.9 Paris      \n##  2 QUAI MAURIAC  / PONT DE BERCY             903 FETE D…  2.37  48.8 Paris      \n##  3 17/19 PLACE JOFFRE / ECOLE MILITAIRE      904 ECOLE …  2.30  48.9 Paris      \n##  4 CONCORDE/BERGES DE SEINE (STATION MOBI…   905 BERGES…  2.32  48.9 Paris      \n##  5 PORT DU GROS CAILLOU (STATION MOBILE)     908 BERGES…  2.31  48.9 Paris      \n##  6 PONT D'ARCOLE (STATION MOBILE)            909 Voie G…  2.35  48.9 Paris      \n##  7 ILE DE LA CITE PONT NEUF                 1001 41 QUA…  2.34  48.9 Paris      \n##  8 PLACE DU CHATELET                        1002 14 AVE…  2.35  48.9 Paris      \n##  9 RIVOLI SAINT DENIS                       1003 7 RUE …  2.35  48.9 Paris      \n## 10 MARGUERITE DE NAVARRE                    1004 12 RUE…  2.35  48.9 Paris      \n## # … with 733 more rows\nstations7592 <- stations %>%\n                  filter(departement==\"Paris\" | departement==\"Hauts-de-Seine\")\nstations7592 <- stations %>%\n                  filter(departement %in% c(\"Paris\" , \"Hauts-de-Seine\"))\nstations7592 <- filter(stations, departement %in% c(\"Paris\" , \"Hauts-de-Seine\"))"},{"path":"efficient-data-management-in-r.html","id":"slice","chapter":"3 Efficient Data Management in R","heading":"3.5.2.2 slice","text":"can use function slice select observations based row numbers.selects observations rows 5 7 equivalent ","code":"\nstations %>%\n  slice(5:7)## # A tibble: 3 × 6\n##   name                                     id address      lng   lat departement\n##   <chr>                                 <dbl> <chr>      <dbl> <dbl> <chr>      \n## 1 PORT DU GROS CAILLOU (STATION MOBILE)   908 BERGES DE…  2.31  48.9 Paris      \n## 2 PONT D'ARCOLE (STATION MOBILE)          909 Voie Geor…  2.35  48.9 Paris      \n## 3 ILE DE LA CITE PONT NEUF               1001 41 QUAI D…  2.34  48.9 Paris\nstations[5:7,]## # A tibble: 3 × 6\n##   name                                     id address      lng   lat departement\n##   <chr>                                 <dbl> <chr>      <dbl> <dbl> <chr>      \n## 1 PORT DU GROS CAILLOU (STATION MOBILE)   908 BERGES DE…  2.31  48.9 Paris      \n## 2 PONT D'ARCOLE (STATION MOBILE)          909 Voie Geor…  2.35  48.9 Paris      \n## 3 ILE DE LA CITE PONT NEUF               1001 41 QUAI D…  2.34  48.9 Paris"},{"path":"efficient-data-management-in-r.html","id":"task-3","chapter":"3 Efficient Data Management in R","heading":"3.5.3 Task","text":"Identify stations 60 bikes available 3pm (.e. time taking value 15).","code":""},{"path":"efficient-data-management-in-r.html","id":"answer-2","chapter":"3 Efficient Data Management in R","heading":"3.5.4 Answer","text":"can use following R code:","code":"\nbikes %>%\n  filter(time==15 & available_bikes>60)## # A tibble: 6 × 4\n##   name                available_bikes available_bike_stands  time\n##   <chr>                         <int>                 <int> <dbl>\n## 1 MUSÉE D'ORSAY                    63                     2    15\n## 2 DUPLEIX                          65                     3    15\n## 3 ASSEMBLEE NATIONALE              62                     0    15\n## 4 SAINT EMILION                    65                     1    15\n## 5 METZ                             63                     1    15\n## 6 PRIMO LEVI                       61                     1    15"},{"path":"efficient-data-management-in-r.html","id":"selecting-variables-columns-using-select","chapter":"3 Efficient Data Management in R","heading":"3.5.5 Selecting variables (columns) using select","text":"function select can used subset variables (columns) data set.can either specify columns retain (minus) want retain.can retain name département station using eitherorYou can also use select change order columns data set.","code":"\nstations.small <- stations %>%\n                     select(name, departement)\nstations.small## # A tibble: 928 × 2\n##    name                                      departement\n##    <chr>                                     <chr>      \n##  1 PORT SOLFERINO (STATION MOBILE)           Paris      \n##  2 QUAI MAURIAC  / PONT DE BERCY             Paris      \n##  3 17/19 PLACE JOFFRE / ECOLE MILITAIRE      Paris      \n##  4 CONCORDE/BERGES DE SEINE (STATION MOBILE) Paris      \n##  5 PORT DU GROS CAILLOU (STATION MOBILE)     Paris      \n##  6 PONT D'ARCOLE (STATION MOBILE)            Paris      \n##  7 ILE DE LA CITE PONT NEUF                  Paris      \n##  8 PLACE DU CHATELET                         Paris      \n##  9 RIVOLI SAINT DENIS                        Paris      \n## 10 MARGUERITE DE NAVARRE                     Paris      \n## # … with 918 more rows\nstations.small <- stations %>% select(-id, -address, -lng, -lat)"},{"path":"efficient-data-management-in-r.html","id":"adding-new-variables-using-mutate","chapter":"3 Efficient Data Management in R","heading":"3.5.6 Adding new variables using mutate","text":"function mutate can used create new variables (columns) data set. mutate similar functionality base R function transform.can add total number stands data set bikes usingMore one new variable can defined adding arguments mutate.transmute sibling mutate. Just like mutate creates new columns. however also removes existing columns new columns remain.","code":"\nbikes <- bikes %>%\n           mutate(total_stands = available_bikes+available_bike_stands)"},{"path":"efficient-data-management-in-r.html","id":"task-4","chapter":"3 Efficient Data Management in R","heading":"3.5.7 Task","text":"time currently encoded decimal (e.g. 13.5 13:30). Create two columns time_hours, contains hour (13 example), time_minutes, contains minutes, (30 example).can calculate time_hours floor time (R function floor) time_minutes remainder integer division 60 times time 60 (R operator %%).","code":""},{"path":"efficient-data-management-in-r.html","id":"answer-3","chapter":"3 Efficient Data Management in R","heading":"3.5.8 Answer","text":"can create columns one call mutate.output show new columns (take output single row one line). can show , example, remove station name.Alternatively, can explicitly invoke print method tibble ask print everything.","code":"\nbikes %>%\n  mutate(time_hour=floor(time), time_minutes=(60*time)%%60)## # A tibble: 67,354 × 7\n##    name            available_bikes available_bike_…  time total_stands time_hour\n##    <chr>                     <int>            <int> <dbl>        <int>     <dbl>\n##  1 CHAMPEAUX (BAG…               9               41    13           50        13\n##  2 POISSONNIÈRE -…              33                0    13           33        13\n##  3 METRO ROME                    6               38    13           44        13\n##  4 DE GAULLE (PAN…               2               16    13           18        13\n##  5 PARC DE BELLEV…               4               22    13           26        13\n##  6 SOLJENITSYNE (…              56                4    13           60        13\n##  7 SERRES                        5               18    13           23        13\n##  8 PYRAMIDE ARTIL…              14               40    13           54        13\n##  9 SAINT GEORGES                12               10    13           22        13\n## 10 MUSÉE D'ORSAY                65                0    13           65        13\n## # … with 67,344 more rows, and 1 more variable: time_minutes <dbl>\nbikes %>%\n  mutate(time_hour=floor(time), time_minutes=(60*time)%%60) %>%\n  select(-name)## # A tibble: 67,354 × 6\n##    available_bikes available_bike_sta…  time total_stands time_hour time_minutes\n##              <int>               <int> <dbl>        <int>     <dbl>        <dbl>\n##  1               9                  41    13           50        13            0\n##  2              33                   0    13           33        13            0\n##  3               6                  38    13           44        13            0\n##  4               2                  16    13           18        13            0\n##  5               4                  22    13           26        13            0\n##  6              56                   4    13           60        13            0\n##  7               5                  18    13           23        13            0\n##  8              14                  40    13           54        13            0\n##  9              12                  10    13           22        13            0\n## 10              65                   0    13           65        13            0\n## # … with 67,344 more rows\nbikes %>%\n  mutate(time_hour=floor(time), time_minutes=(60*time)%%60) %>%\n  print(width=Inf)## # A tibble: 67,354 × 7\n##    name                       available_bikes available_bike_stands  time\n##    <chr>                                <int>                 <int> <dbl>\n##  1 CHAMPEAUX (BAGNOLET)                     9                    41    13\n##  2 POISSONNIÈRE - ENGHIEN                  33                     0    13\n##  3 METRO ROME                               6                    38    13\n##  4 DE GAULLE (PANTIN)                       2                    16    13\n##  5 PARC DE BELLEVILLE (20040)               4                    22    13\n##  6 SOLJENITSYNE (PUTEAUX)                  56                     4    13\n##  7 SERRES                                   5                    18    13\n##  8 PYRAMIDE ARTILLERIE                     14                    40    13\n##  9 SAINT GEORGES                           12                    10    13\n## 10 MUSÉE D'ORSAY                           65                     0    13\n##    total_stands time_hour time_minutes\n##           <int>     <dbl>        <dbl>\n##  1           50        13            0\n##  2           33        13            0\n##  3           44        13            0\n##  4           18        13            0\n##  5           26        13            0\n##  6           60        13            0\n##  7           23        13            0\n##  8           54        13            0\n##  9           22        13            0\n## 10           65        13            0\n## # … with 67,344 more rows"},{"path":"efficient-data-management-in-r.html","id":"sorting-data-sets-using-arrange","chapter":"3 Efficient Data Management in R","heading":"3.5.9 Sorting data sets using arrange","text":"function arrange can used sort data set one variables.\ncan sort data set bikes number available bikes suingYou can use function desc sort descending order","code":"\nbikes %>%\n  arrange(available_bikes)## # A tibble: 67,354 × 5\n##    name                      available_bikes available_bike_…  time total_stands\n##    <chr>                               <int>            <int> <dbl>        <int>\n##  1 KARMAN (AUBERVILLIERS)                  0                0    13            0\n##  2 PIGALLE GERMAIN PILLON                  0               20    13           20\n##  3 ROND POINT DES CHAMPS EL…               0                0    13            0\n##  4 MONTCALM                                0               47    13           47\n##  5 PLACE HENOCQUE VERSION 2                0               34    13           34\n##  6 PLACE DES FETES                         0               19    13           19\n##  7 MANIN SECRETAN                          0               20    13           20\n##  8 MARTINIE (VANVES)                       0               24    13           24\n##  9 HORTENSIAS (LES LILAS)                  0               22    13           22\n## 10 HAIES REUNION                           0               22    13           22\n## # … with 67,344 more rows\nbikes %>%\n  arrange(desc(available_bikes))## # A tibble: 67,354 × 5\n##    name    available_bikes available_bike_stands  time total_stands\n##    <chr>             <int>                 <int> <dbl>        <int>\n##  1 DUPLEIX              68                     0  16.2           68\n##  2 DUPLEIX              68                     0  16.2           68\n##  3 DUPLEIX              67                     1  15.4           68\n##  4 DUPLEIX              67                     1  15.5           68\n##  5 DUPLEIX              67                     1  15.8           68\n##  6 DUPLEIX              67                     1  16.1           68\n##  7 DUPLEIX              67                     1  16.3           68\n##  8 SAHEL                67                     0  17.6           67\n##  9 SAHEL                67                     0  18             67\n## 10 SAHEL                67                     0  18.1           67\n## # … with 67,344 more rows"},{"path":"efficient-data-management-in-r.html","id":"task-5","chapter":"3 Efficient Data Management in R","heading":"3.5.10 Task","text":"Identify three bike stations furthest West (.e. ones smallest longitude lng).","code":""},{"path":"efficient-data-management-in-r.html","id":"answer-4","chapter":"3 Efficient Data Management in R","heading":"3.5.11 Answer","text":"first sort stations longitude select top three observations.also used function filter ranking function min_rank:min_rank returns rank observation considering variable given argument (many different ways computing ranks, see ?min_rank details.)However, latter answer show stations increasing order longitude.","code":"\nstations %>%\n  arrange(lng) %>%\n  slice(1:3)## # A tibble: 3 × 6\n##   name                            id address               lng   lat departement\n##   <chr>                        <dbl> <chr>               <dbl> <dbl> <chr>      \n## 1 GARE ROUTIERE ( SAINT CLOUD) 22101 GARE ROUTIERE - AR…  2.22  48.8 Hauts-de-S…\n## 2 SELLIER (SURESNES)           21501 RUE DE SAINT CLOUD…  2.23  48.9 Hauts-de-S…\n## 3 VERDUN (SURESNES)            21502 18 BIS RUE DE VERD…  2.23  48.9 Hauts-de-S…\nstations %>%\n  filter(min_rank(lng)<=3)## # A tibble: 3 × 6\n##   name                            id address               lng   lat departement\n##   <chr>                        <dbl> <chr>               <dbl> <dbl> <chr>      \n## 1 SELLIER (SURESNES)           21501 RUE DE SAINT CLOUD…  2.23  48.9 Hauts-de-S…\n## 2 VERDUN (SURESNES)            21502 18 BIS RUE DE VERD…  2.23  48.9 Hauts-de-S…\n## 3 GARE ROUTIERE ( SAINT CLOUD) 22101 GARE ROUTIERE - AR…  2.22  48.8 Hauts-de-S…"},{"path":"efficient-data-management-in-r.html","id":"grouping-data-and-calculating-group-wise-summary-statistics-group_by-and-summarise","chapter":"3 Efficient Data Management in R","heading":"3.5.12 Grouping data and calculating group-wise summary statistics: group_by and summarise","text":"Suppose want identify busiest stations system sense , average, bikes taken (thus highest number available bike stands – assuming JCDecaux replenish bike stations way, quite happening reality; better, complex, ways defining “busy”).calculate average number available bike stands per station need first group data bike station compute average number bike stands available","code":"\nbikes %>% group_by(name) %>%                             # Group by station name\n  summarise(avg_stands=mean(available_bike_stands)) %>%  # Calculate averages\n  arrange(desc(avg_stands))                              # Sort in descending order## # A tibble: 928 × 2\n##    name                               avg_stands\n##    <chr>                                   <dbl>\n##  1 PANTIN                                   70.3\n##  2 BELLEVILLE (20041)                       65.1\n##  3 PLACE ADOLPHE CHERIOUX                   60  \n##  4 HIPPODROME D AUTEUIL                     60.0\n##  5 RUE DES BOULETS ( COMPLEMENTAIRE )       55  \n##  6 PLACE DE LA PORTE DE CHATILLON           54.9\n##  7 PORTE DE LA CHAPELLE                     54.1\n##  8 CHARMES (FONTENAY SOUS BOIS)             53.5\n##  9 PORTE DE MONTROUGE                       53  \n## 10 ALLENDE (PANTIN)                         52.9\n## # … with 918 more rows"},{"path":"efficient-data-management-in-r.html","id":"task-6","chapter":"3 Efficient Data Management in R","heading":"3.5.13 Task","text":"Find number bike stations département.might find function n() helpful, returns number cases dplyr equivalent COUNT(*) SQL (type ?n get help).","code":""},{"path":"efficient-data-management-in-r.html","id":"answer-5","chapter":"3 Efficient Data Management in R","heading":"3.5.14 Answer","text":"can use following R code:group_by can also used limit scope subsequent calls functions filter, arrange slice. make concrete, suppose want find time point station available bikes. first group data time find station available bikes.Alternatively, can use filter min_rank:might noticed answers differ little. reason ties: example, 1.15pm stations Mussée d’Orsay, Mouffetard Epée de Bois Sainte Placide Cherche-Midi 62 bikes available. former commands extracts just one , whereas bottom command extracts three.\n(obtain results replaced min_rank row_number, breaks ties using doubt order data set).","code":"\nstations %>% group_by(departement) %>%         # Group by department\n  summarise(n_stations=n()) %>%                # Count cases\n  arrange(desc(n_stations))                    # Sort in descending order## # A tibble: 4 × 2\n##   departement       n_stations\n##   <chr>                  <int>\n## 1 Paris                    743\n## 2 Hauts-de-Seine            75\n## 3 Seine-Saint-Denis         60\n## 4 Val-de-Marne              50\nbikes %>%                                     \n  group_by(time) %>%                           # Group by time\n  arrange(desc(available_bikes)) %>%           # Sort by bikes within each group\n  slice (1)                                    # Return only top one per group## # A tibble: 73 × 5\n## # Groups:   time [73]\n##    name          available_bikes available_bike_stands  time total_stands\n##    <chr>                   <int>                 <int> <dbl>        <int>\n##  1 MUSÉE D'ORSAY              65                     0  13             65\n##  2 MUSÉE D'ORSAY              65                     0  13.1           65\n##  3 MUSÉE D'ORSAY              65                     0  13.2           65\n##  4 MUSÉE D'ORSAY              62                     3  13.2           65\n##  5 METZ                       64                     0  13.3           64\n##  6 DUPLEIX                    64                     4  13.4           68\n##  7 METZ                       64                     0  13.5           64\n##  8 MUSÉE D'ORSAY              63                     2  13.6           65\n##  9 SAINT EMILION              63                     3  13.7           66\n## 10 MUSÉE D'ORSAY              65                     0  13.8           65\n## # … with 63 more rows\nbikes %>%                                     \n  group_by(time) %>%                           # Group by time\n  filter(min_rank(desc(available_bikes))==1)   # Find largest in each group## # A tibble: 92 × 5\n## # Groups:   time [73]\n##    name                      available_bikes available_bike_…  time total_stands\n##    <chr>                               <int>            <int> <dbl>        <int>\n##  1 MUSÉE D'ORSAY                          65                0  13             65\n##  2 MUSÉE D'ORSAY                          65                0  13.1           65\n##  3 MUSÉE D'ORSAY                          65                0  13.2           65\n##  4 MUSÉE D'ORSAY                          62                3  13.2           65\n##  5 MOUFFETARD EPEE DE BOIS                62                1  13.2           63\n##  6 SAINT PLACIDE CHERCHE MI…              62                0  13.2           62\n##  7 METZ                                   64                0  13.3           64\n##  8 DUPLEIX                                64                4  13.4           68\n##  9 METZ                                   64                0  13.4           64\n## 10 METZ                                   64                0  13.5           64\n## # … with 82 more rows"},{"path":"efficient-data-management-in-r.html","id":"merging-joining-data-sets-using-the-join-type-functions","chapter":"3 Efficient Data Management in R","heading":"3.5.15 Merging (joining) data sets using the join-type functions","text":"Suppose want extract data bikes relating bike stations Hauts-de-Seine . table bikes however contain information département stations located. need merge information stations bikes. can done using one join functions dplyr. use inner_join, retains cases corresponding entries data sets: corresponds default behaviour R function merge.join functions default use columns common names across two data sets (“natural join”).specified column used join data sets manually adding argument =\"name\" (=c(\"name\"=\"name\"), allows using columns different names two data set).side note, example, avoided joining two tables. first extracted names stations Hauts-de-Seine used subset data bikes (essentially equivalent subquery SQL):use names92[[1]] extract entries tibble names92 character vector (also used unlist(names92)).might notice small difference results returned two approaches. former retains columns stations inserted, whereas latter contains columns bikes contained start .","code":"\nbikes %>% inner_join(stations) %>%              # Merge data (using common variable: name)\n  filter(departement==\"Hauts-de-Seine\")## Joining, by = \"name\"## # A tibble: 5,333 × 10\n##    name  available_bikes available_bike_…  time total_stands    id address   lng\n##    <chr>           <int>            <int> <dbl>        <int> <dbl> <chr>   <dbl>\n##  1 SOLJ…              56                4    13           60 28002 BOULEV…  2.25\n##  2 DE G…               3               19    13           22 22005 195 AV…  2.26\n##  3 NATI…              20                3    13           23 21015 39 RUE…  2.24\n##  4 MONT…              20                5    13           25 22011 7 RUE …  2.28\n##  5 PETI…              22                0    13           22 21113 2 RUE …  2.30\n##  6 GREN…               9               12    13           21 21013 4 AVEN…  2.25\n##  7 MART…               0               24    13           24 21703 5-7 AV…  2.29\n##  8 MORI…              22                3    13           25 21106 2-4 RU…  2.31\n##  9 SELL…              34               17    13           51 21501 RUE DE…  2.23\n## 10 VALI…              22                2    13           24 21101 4 RUE …  2.30\n## # … with 5,323 more rows, and 2 more variables: lat <dbl>, departement <chr>\nnames92 <- stations %>% filter(departement==\"Hauts-de-Seine\") %>%\n               select(name) \nbikes %>% filter(name %in% names92[[1]]) ## # A tibble: 5,333 × 5\n##    name                      available_bikes available_bike_…  time total_stands\n##    <chr>                               <int>            <int> <dbl>        <int>\n##  1 SOLJENITSYNE (PUTEAUX)                 56                4    13           60\n##  2 DE GAULLE 3 (NEUILLY)                   3               19    13           22\n##  3 NATIONALE (BOULOGNE-BILL…              20                3    13           23\n##  4 MONTROSIER (NEUILLY)                   20                5    13           25\n##  5 PETIT (CLICHY)                         22                0    13           22\n##  6 GRENIER (BOULOGNE-BILLAN…               9               12    13           21\n##  7 MARTINIE (VANVES)                       0               24    13           24\n##  8 MORICE 2 (CLICHY)                      22                3    13           25\n##  9 SELLIER (SURESNES)                     34               17    13           51\n## 10 VALITON (CLICHY)                       22                2    13           24\n## # … with 5,323 more rows"},{"path":"efficient-data-management-in-r.html","id":"additional-resources-2","chapter":"3 Efficient Data Management in R","heading":"3.5.16 Additional Resources","text":"Data Transformation Cheat Sheet\nRStudio put together handy compact cheat sheet dplyr.Background reading: Chapter 13 R Data Science\nChapter 13 R Data Science gives detailed overview functions dplyr.","code":""},{"path":"creating-graphics-with-ggplot2.html","id":"creating-graphics-with-ggplot2","chapter":"4 Creating Graphics with ggplot2","heading":"4 Creating Graphics with ggplot2","text":"package ggplot2 provides abstract declarative environment creating graphics.graphics system built R already quite powerful flexible, creating sophisticated graphics can time-consuming many steps performed automatically, like adding legend, performed manually. Code producing complex visualisations tends “procedural”: rather describing visualisation look like, code describes detailed control flow plot constructed.section, use health dataset. can download data R console running following command:","code":"\nload(url(\"https://github.com/UofGAnalyticsData/R/raw/main/Week%205/w5.RData\"))"},{"path":"creating-graphics-with-ggplot2.html","id":"ggplot-terms","chapter":"4 Creating Graphics with ggplot2","heading":"4.1 ggplot terms","text":"section gives overview key terms ggplot2 world. ggplot2 based philosophy “layered grammar graphics”: plots ggplot2 made least one layer geometric objects.","code":""},{"path":"creating-graphics-with-ggplot2.html","id":"geometric-objects","chapter":"4 Creating Graphics with ggplot2","heading":"4.1.1 Geometric objects","text":"geometric object (geom_<type>(...) ggplot2 commands) controls type plot layer contains. many different geometric objects: important ones …cheat sheet providing detailed overview different geometries data.","code":""},{"path":"creating-graphics-with-ggplot2.html","id":"aesthetics","chapter":"4 Creating Graphics with ggplot2","heading":"4.1.2 Aesthetics","text":"aesthetic (aes(...) ggplot2 commands) controls variables mapped properties geometric objects (like x-coordinates, y-coordinates, colours, etc.). aesthetics available depend geometric object. Aesthetics commonly available …help file geometry lists available aesthetics.","code":""},{"path":"creating-graphics-with-ggplot2.html","id":"using-the-more-general-ggplot-interface","chapter":"4 Creating Graphics with ggplot2","heading":"4.2 Using the more general ggplot interface","text":"","code":""},{"path":"creating-graphics-with-ggplot2.html","id":"a-typical-ggplot-call","chapter":"4 Creating Graphics with ggplot2","heading":"4.2.1 A typical ggplot call","text":"plotting command ggplot consists sequence function calls added together using standard sum operator +:geom_<type> objects necessarily use data specified call ggplot. optional argument data specified, data source provided used layer.following example, use data health expenditure country, reported annual basis. can produce plot like following using ggplot commands.","code":"ggplot(data=...) +                # Specify data source\n    aes(...) +                    # Generic aesthetics applying to all layers\n    geom_<type>(aes(...), ...)  + # Geometry for one layer with layers-specific aesthetics\n    geom_<type>(aes(...), ...)  +\n    ...                           # Further arguments for fine-tuning (themes, scales, facets, ...)\nggplot(data=health) + \n  aes(x=HealthExpenditure,  y=LifeExpectancy) +\n  geom_point(aes(colour=Region, size=Population)) +\n  scale_x_log10()"},{"path":"creating-graphics-with-ggplot2.html","id":"adding-additional-layers","chapter":"4 Creating Graphics with ggplot2","heading":"4.2.2 Adding additional layers","text":"Additional layers can simply added plot. example, can add overall regression line confidence bands usingIf want add different regression line country make sure group colour aesthetic passed geom_smooth. pass aes(colour=Region) geom_smooth. Alternatively, can move colour=Region aesthetics specific geom_point generic aesthetics, colour=Region now applies geom_point geom_smooth.warning comes fact two North American countries, can fit line error, means draw confidence bands.plot looks slightly messy, use facet_wrap later split separate panels.Suppose want annotate observations belonging Australia, UK, US.labels however cover observations might fully visible. can avoided using function geom_label_repel ggrepel.time, used different approach. Rather subsetting data creating separate data frame containing data three countries, created new column data frame health, blank except three countries. required ggrepel layers aware data drawn layer: way can avoid labels covering observations labelled.","code":"\nggplot(data=health) + \n    aes(x=HealthExpenditure,  y=LifeExpectancy) +\n    geom_point(aes(colour=Region, size=Population)) +\n    geom_smooth(method=\"lm\")  +\n    scale_x_log10()## `geom_smooth()` using formula 'y ~ x'\nggplot(data=health) + \n    aes(x=HealthExpenditure,  y=LifeExpectancy, colour=Region) +\n    geom_point(aes(size=Population)) +\n    geom_smooth(method=\"lm\")  +\n    scale_x_log10()## `geom_smooth()` using formula 'y ~ x'## Warning in qt((1 - level)/2, df): NaNs produced## Warning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n## -Inf\nhealth2 <- health %>%\n    filter(Country %in% c(\"Australia\", \"United Kingdom\", \"United States\"))\nggplot(data=health) + \n    aes(x=HealthExpenditure,  y=LifeExpectancy, colour=Region) +\n    geom_point(aes(size=Population)) +\n    geom_label(data=health2, \n               aes(x=HealthExpenditure,  y=LifeExpectancy, label=Country),\n               show.legend=FALSE)\nhealth <- health %>%\n    mutate(CountryLabel=ifelse(Country%in%c(\"Australia\", \"United Kingdom\", \"United States\"),\n                               as.character(Country),\"\"))\n\nlibrary(ggrepel)\nggplot(data=health) + \n    aes(x=HealthExpenditure,  y=LifeExpectancy, colour=Region) +\n    geom_point(aes(size=Population)) +\n    geom_label_repel(aes(label=CountryLabel), show.legend=FALSE)"},{"path":"creating-graphics-with-ggplot2.html","id":"explicit-drawing","chapter":"4 Creating Graphics with ggplot2","heading":"4.2.3 Explicit drawing","text":"standard R plotting functions draw plot soon plot function invoked.Plotting commands ggplot2 (including qplot) return objects (otherwise + notation work) draw plot print plot methods invoked. console case used without assignment.Inside loops functions print plot methods need invoked explicitly using methods print plot.","code":"\na <- ggplot(data=health) +            # Does not draw anything\n         aes(x=HealthExpenditure, y=LifeExpectancy) +\n         geom_point()\n\nb <- a + scale_x_log10()              # Does not draw anything either\n\na                                     # Now the plot stored in a gets drawn\nprint(a)                              # Draw a again (explicit invocation)\n\nb                                     # Now the plot stored in b gets drawn"},{"path":"creating-graphics-with-ggplot2.html","id":"task-7","chapter":"4 Creating Graphics with ggplot2","heading":"4.2.4 Task","text":"Consider two vectors x y created usingUse ggplot2 create scatterplot y.noisy x, also shows noise-free sine curve y.","code":"\nn <- 1e3\nx <- runif(n, 0, 2*pi)                   # x is random uniform from (0,2*pi)\n# x <- sort(x)                           # Sorting of x _not_ needed for ggplot\ny <- sin(x)                              # Set y to the sine of x\ny.noisy <- y + .25 * rnorm(n)            # Create noisy version of y"},{"path":"creating-graphics-with-ggplot2.html","id":"answer-6","chapter":"4 Creating Graphics with ggplot2","heading":"4.2.5 Answer","text":"can use following R code:matter whether geom_point geom_line comes first. ggplot2 adapts axes objects drawn fit (just first one case using standard R plotting functions plot points).","code":"\nggplot() +                               # No need to use data=... as x, y and y.noisy\n                                         # are variables in the workspace and not columns\n                                         # in a dataset\n    geom_point(aes(x, y.noisy)) +\n    geom_line(aes(x, y))"},{"path":"creating-graphics-with-ggplot2.html","id":"modifying-plots","chapter":"4 Creating Graphics with ggplot2","heading":"4.3 Modifying Plots","text":"","code":""},{"path":"creating-graphics-with-ggplot2.html","id":"labels-and-titles","chapter":"4 Creating Graphics with ggplot2","heading":"4.3.1 Labels and titles","text":"can set plot title using ggtitle(title) axis labels using xlab(label) ylab(label).Changing text shown legends (like case names regions) complicated. almost always easier simply change levels categorical variable dataset invoking ggplot2 commands.","code":"\nggplot(data=health) + \n    aes(x=HealthExpenditure,  y=LifeExpectancy, colour=Region) +\n    geom_point(aes(size=Population)) +\n    geom_smooth(method=\"lm\")  +\n    scale_x_log10() +\n    ggtitle(\"Relationship between Health Expenditure and Life Expectancy\") +\n    xlab(\"Health Expenditure\") +\n    ylab(\"Life Expectancy\")    ## `geom_smooth()` using formula 'y ~ x'"},{"path":"creating-graphics-with-ggplot2.html","id":"scales","chapter":"4 Creating Graphics with ggplot2","heading":"4.3.2 Scales","text":"Aesthetics control variables mapped property geometric object. However, aesthetics specify mapping performed. scales come play. Scales control value variable translated property geometric object: scales control example variable translated coordinates (say log transform) colours (say though discrete colour palette).ggplot2 automatically chooses (thinks ) suitable scale. usually reasonable, occasions might necessary override .family scale functions aesthetic. template function name scales scale_<aesthetic>_<type>.","code":""},{"path":"creating-graphics-with-ggplot2.html","id":"scales-for-continuous-data","chapter":"4 Creating Graphics with ggplot2","heading":"4.3.2.1 Scales for continuous data","text":"already seen can log-transform axes using scale_x_log10 scale_x_log10. general functions coordinate transforms scale_<x y>_continous(...). can. amongst others, set axis label (argument name, ticks tickmarks (arguments breaks labels) limits (argument limit) transform used (argument trans).axes might use scientific notation (e.g. “4e5”). want avoid using scientific notation use fixed notation, change scipen option R, controls scientific notation used (example run options(scipen=1e3)).functions mapping continuous data aesthetics, . example, scale_colour_gradient converts continuous variable colour using gradient colours. arguments low high specify colours used two ends. scale_colour_gradient2 allows also specifying mid-point colour (argument mid). scale_colour_gradientn general function allows specifying vector colours corresponding vector colours. function scale_colour_distiller uses colour brewer available http://colorbrewer2.org/ allows constructing colours scales photocopier-safe /work colour-blind readers.used trans=\"log\" use log-transformed values population sizes (due skewness). values given legend seem slightly odd choices: due log-transform (roughly \\(\\exp(14)\\), \\(\\exp(17)\\) \\(\\exp(20)\\), “nice” numbers log scale).stored plot variable can redraw later different themes.","code":"\na <- ggplot(data=health) +\n         aes(x=HealthExpenditure, y=LifeExpectancy) +\n         geom_point(aes(colour=Population)) +\n         scale_colour_distiller(palette=\"YlOrRd\" , trans=\"log\")\na"},{"path":"creating-graphics-with-ggplot2.html","id":"scales-for-discrete-data","chapter":"4 Creating Graphics with ggplot2","heading":"4.3.2.2 Scales for discrete data","text":"also various scaling functions discrete data, scale_colour_brewer.Note separate scales colour (outline colour – example: scale_colour_brewer) fill (fill colour – example: scale_fill_brewer).","code":""},{"path":"creating-graphics-with-ggplot2.html","id":"statistics","chapter":"4 Creating Graphics with ggplot2","heading":"4.3.3 Statistics","text":"Sometimes data aggregated can used plot. example, creating bar plot illustrating distribution categorical variable count many observations category. determine height bars. ggplot2 automatically chooses (thinks ) suitable statistic.example, draw bar plot using geom_bar, uses default statistic count, first produces tally. don’t need worry , ggplot2 work us.Suppose now want draw bar chart visualising mean health expenditure region. Now don’t want ggplot2 produce tally often value occurs, want simply draw bars heights specified data. now want aggregation, use statistic identity.","code":"\nggplot(data=health) +\n    geom_bar(aes(x=Region)) +\n    theme(axis.text.x = element_text(angle = 90, hjust = 1)) # Rotate x axis labels\nlibrary(dplyr)\nHESummary <- health %>%                                      # Get avg health exp\n                 group_by(Region) %>% \n                 summarise(HealthExpenditure=mean(HealthExpenditure))\nggplot(data=HESummary) +\n    geom_bar(aes(x=Region, y=HealthExpenditure), stat=\"identity\") +\n    theme(axis.text.x = element_text(angle = 90, hjust = 1)) # Rotate x axis labels"},{"path":"creating-graphics-with-ggplot2.html","id":"theming","chapter":"4 Creating Graphics with ggplot2","heading":"4.3.4 Theming","text":"Themes can used customise ggplot2 graphics look like. already used theme change horizontal axis typeset.ggplot2 several themes built-. default theme theme_gray. themes available theme_bw (monochrome), theme_light, theme_lindedraw theme_minimal. themes available extension packages ggthemes.","code":"\na + theme_minimal()\nlibrary(ggthemes)\na + theme_economist() + theme(legend.position=\"right\")"},{"path":"creating-graphics-with-ggplot2.html","id":"arranging-plots-faceting","chapter":"4 Creating Graphics with ggplot2","heading":"4.3.5 Arranging plots (faceting)","text":"function facet_grid(rvar~cvar) creates separate plots based values rvar (rows) cvar (columns) takes. function facet_wrap(~var1+var2) arranges plots several rows columns without rigidly associating one variable rows one columns. Continuous variables need discretised (example using cut) can used defining facets.Arranging plots general ways (like par(mfrow=c(...)) layout) directly possible ggplot2. package gridExtra however provides function grid.arrange, allows arranging ggplot2 plots side side.","code":"\nggplot(data=health) + \n    aes(x=HealthExpenditure,  y=LifeExpectancy, colour=Region) +\n    geom_point(aes(size=Population)) +\n    geom_smooth(method=\"lm\")  +\n    scale_x_log10() +\n    facet_wrap(~Region)## `geom_smooth()` using formula 'y ~ x'## Warning in qt((1 - level)/2, df): NaNs produced## Warning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n## -Inf"},{"path":"handling-date-time-data-with-lubridate.html","id":"handling-date-time-data-with-lubridate","chapter":"5 Handling date-time data with lubridate","heading":"5 Handling date-time data with lubridate","text":"Date-time data can complex handle R. Classic R commands date-times generally unintuitive vary depending date-time object used. lubridate package makes easier handle date-times R handle many tasks classic R functions handle.cover useful commands within package consult lubridate cheat sheet series useful commands.Lubridate cheat sheet","code":""},{"path":"handling-date-time-data-with-lubridate.html","id":"creating-datetimes","chapter":"5 Handling date-time data with lubridate","heading":"5.1 Creating date/times","text":"three types date/time data refer instant time:date. Tibbles print <date>time within day. Tibbles print <time>date-time date plus time: uniquely identifies instant time. Tibbles print <dttm>.always use simplest possible data type need.three ways likely create date/time:stringFrom date/time componentsFrom existing date/time objectThese can created follows.","code":""},{"path":"handling-date-time-data-with-lubridate.html","id":"from-strings","chapter":"5 Handling date-time data with lubridate","heading":"5.1.1 From strings","text":"can convert string date/time object using functions within lubridate. functions automatically work format specify order component. use , identify order year, month day appear dates, arrange “y”, “m”, “d” order. gives name function need call. example:functions also take unquoted numbers. concise way create single date/time object.create date-time, add underscore previous functions one “h”, “m” “s” name functionYou can also force creation date-time date supplying timezone","code":"\nymd(\"2022-08-02\")## [1] \"2022-08-02\"\nmdy(\"August 2nd, 2022\")## [1] \"2022-08-02\"\ndmy(\"02-Aug-2022\")## [1] \"2022-08-02\"\nymd(20220802)## [1] \"2022-08-02\"\nymd_hms(\"2022-08-02 13:05:02\")## [1] \"2022-08-02 13:05:02 UTC\"\nmdy_hm(\"08/02/2022 13:05\")## [1] \"2022-08-02 13:05:00 UTC\"\nymd(20220802,tz=\"UTC\")## [1] \"2022-08-02 UTC\""},{"path":"handling-date-time-data-with-lubridate.html","id":"from-individual-components","chapter":"5 Handling date-time data with lubridate","heading":"5.1.2 From individual components","text":"Instead string, sometimes may individual components date-time spread across multiple columns. Looking data provided within nycflights13 library, seeTo create date/time data, can use make_date() dates, make_datetime() date-times:","code":"\nlibrary(nycflights13)\nlibrary(tidyverse)\n\nflights %>%\n  select(year,month,day,hour,minute)## # A tibble: 336,776 × 5\n##     year month   day  hour minute\n##    <int> <int> <int> <dbl>  <dbl>\n##  1  2013     1     1     5     15\n##  2  2013     1     1     5     29\n##  3  2013     1     1     5     40\n##  4  2013     1     1     5     45\n##  5  2013     1     1     6      0\n##  6  2013     1     1     5     58\n##  7  2013     1     1     6      0\n##  8  2013     1     1     6      0\n##  9  2013     1     1     6      0\n## 10  2013     1     1     6      0\n## # … with 336,766 more rows\nflights <- flights %>%\n  select(year,month,day,hour,minute) %>%\n  mutate(departure_time=make_datetime(year,month,day,hour,minute))"},{"path":"handling-date-time-data-with-lubridate.html","id":"from-existing-types","chapter":"5 Handling date-time data with lubridate","heading":"5.1.3 From existing types","text":"may wish switch date-time date. can done using as_datetime() as_date()","code":"\nas_datetime(today())## [1] \"2022-08-15 UTC\"\nas_date(now())## [1] \"2022-08-15\""},{"path":"handling-date-time-data-with-lubridate.html","id":"date-time-components","chapter":"5 Handling date-time data with lubridate","heading":"5.2 Date-time Components","text":", look functions can let us access certain components date-time object.can obtain certain parts date functions like year(), month(), mday() (day month), yday() (day year), hour(), minute() second().month() wday(), can set label=TRUE return abbreviated name month day week. Set abbr=FALSE return full name.can use wday() see flights depart week weekend","code":"\ndate_time <- ymd_hms(\"2021-12-25,09:10:25\")\n\nyear(date_time)## [1] 2021\nmonth(date_time)## [1] 12\nmday(date_time)## [1] 25\nyday(date_time)## [1] 359\nmonth(date_time,label=TRUE)## [1] Dec\n## 12 Levels: Jan < Feb < Mar < Apr < May < Jun < Jul < Aug < Sep < ... < Dec\nwday(date_time,label=TRUE,abbr=FALSE)## [1] Saturday\n## 7 Levels: Sunday < Monday < Tuesday < Wednesday < Thursday < ... < Saturday\nflights %>% \n  mutate(wday = wday(departure_time, label = TRUE)) %>% \n  ggplot(aes(x = wday)) +\n    geom_bar()"},{"path":"handling-date-time-data-with-lubridate.html","id":"time-spans","chapter":"5 Handling date-time data with lubridate","heading":"5.2.1 Time Spans","text":"Now look arithmetic dates works, including subtraction, addition division. explore following three classes:durations, represent exact number secondsperiods, represent units like weeks monthsintervals, represent start end point","code":""},{"path":"handling-date-time-data-with-lubridate.html","id":"durations","chapter":"5 Handling date-time data with lubridate","heading":"5.2.2 Durations","text":"can find duration (given seconds) using .duration() function shown belowDurations also come useful additional functions shown belowWe can also add multiply durations","code":"\n# How old is Craig?\nc_age <- today() - ymd(19910502)\nas.duration(c_age)## [1] \"987379200s (~31.29 years)\"\ndseconds(10)## [1] \"10s\"\ndminutes(60)## [1] \"3600s (~1 hours)\"\ndhours(30)## [1] \"108000s (~1.25 days)\"\nddays(c(4,15))## [1] \"345600s (~4 days)\"      \"1296000s (~2.14 weeks)\"\ndweeks(1:4)## [1] \"604800s (~1 weeks)\"  \"1209600s (~2 weeks)\" \"1814400s (~3 weeks)\"\n## [4] \"2419200s (~4 weeks)\"\ndyears(2)## [1] \"63115200s (~2 years)\"\n3*dmonths(5)## [1] \"39447000s (~1.25 years)\"\ndyears(3) + dweeks(14) +dhours(6)## [1] \"103161600s (~3.27 years)\""},{"path":"handling-date-time-data-with-lubridate.html","id":"periods","chapter":"5 Handling date-time data with lubridate","heading":"5.2.3 Periods","text":"Periods time spans, don’t fixed length seconds, work “human” times, like days weeks.Like durations, periods can constructed using well named constructor functions.Like durations, can add multiply periods","code":"\ntoday() + days(1)## [1] \"2022-08-16\"\nseconds(15)## [1] \"15S\"\nminutes(10)## [1] \"10M 0S\"\nhours(30)## [1] \"30H 0M 0S\"\ndays(c(2,5))## [1] \"2d 0H 0M 0S\" \"5d 0H 0M 0S\"\nmonths(2:5)## [1] \"2m 0d 0H 0M 0S\" \"3m 0d 0H 0M 0S\" \"4m 0d 0H 0M 0S\" \"5m 0d 0H 0M 0S\"\nweeks(3)## [1] \"21d 0H 0M 0S\"\nyears(1)## [1] \"1y 0m 0d 0H 0M 0S\"\n3*(months(4) + days(12))## [1] \"12m 36d 0H 0M 0S\"\ndays(25) + hours(16) + minutes(12)## [1] \"25d 16H 12M 0S\""},{"path":"handling-date-time-data-with-lubridate.html","id":"intervals","chapter":"5 Handling date-time data with lubridate","heading":"5.2.4 Intervals","text":"interval duration starting point, makes precise can determine exactly long :find many periods fall interval, need use integer division %/%","code":"\nnext_year <- today() + years(1)\n(today() %--% next_year)/ddays(1)## [1] 365"},{"path":"producing-maps-for-plotting.html","id":"producing-maps-for-plotting","chapter":"6 Producing maps for plotting","heading":"6 Producing maps for plotting","text":"","code":""},{"path":"producing-maps-for-plotting.html","id":"producing-maps-using-ggmap","chapter":"6 Producing maps for plotting","heading":"6.1 Producing maps using ggmap","text":"R package ggmap can download maps Google maps (OpenStreetMap) can used background layer ggplot2 plot.function get_map(location, zoom) downloads map. location can pair longitude latitude, character string describing location, bounding box. zoom controls zoom level (3 (continent) 21 (highest resolution)). optional argument maptype can used select type map downloaded (example \"roadmap\", \"hybrid\" \"satellite\" using Google maps)Note access Google API (Google map tiles geolocation (translation location description GPS coordinates) requires Google API key. using bounding box \"stamen\" source, API key required.map can plotted using ggmap(map). Layers can added map using usual ggplot2 commands.","code":"\nlibrary(ggmap)\nboundingbox <- c(left = 5.855, bottom = 51.817, right = 5.871, top = 51.826)\nmap <- get_map(boundingbox, zoom=16, source=\"stamen\")\nggmap(map) + \n    geom_label(x=5.862, y=51.823, label=\"Radboud University\") "},{"path":"producing-maps-for-plotting.html","id":"task-8","chapter":"6 Producing maps for plotting","heading":"6.1.1 Task","text":"task, use data two tibbles, stations trips. contain information list bike stations Bay Area Bike Share system San Francisco Bay Area.can download data using following commandIt following columns.tibble trips contains trips made August 2015. following columns.Plot locations bike stations. can use following bounding box map(Harder) trips within city San Francisco, use code create origin-destination matrix. \\((,j)\\)th entry contains number trips station \\(\\) station \\(j\\).Create plot representing number trips stations. Use line thickness transparency indicate number trips. can use following bounding box map","code":"\nload(url(\"https://github.com/UofGAnalyticsData/R/raw/main/Week%206/t3.RData\"))\nboundingbox <- c(left = -122.5, bottom = 37.25, right = -121.75, top = 38)\nlibrary(tidyverse)\n\nsf_stations <- stations %>%\n    filter(city==\"San Francisco\") \n\nod <- trips %>%\n         filter(start_station_id%in%sf_stations$station_id,\n                end_station_id%in%sf_stations$station_id) %>%\n         group_by(start_station_id, end_station_id) %>%\n         summarise(ntrips=n()) ## `summarise()` has grouped output by 'start_station_id'. You can override using\n## the `.groups` argument.\nodm <- od %>%\n         spread(end_station_id, ntrips, fill=0) \n\nodm <- as.matrix(od[,-1])\nrownames(odm) <- od$start_station_id\n\nod2 <- od %>% \n    full_join(od, by=c(\"start_station_id\"=\"end_station_id\", \"end_station_id\"=\n\"start_station_id\")) %>%\n    replace_na(list(ntrips.x=0, ntrips.y=0)) %>%\n    mutate(ntrips=ntrips.x+ntrips.y) %>%\n    select(-ntrips.x, -ntrips.y) %>%\n    filter(start_station_id<end_station_id)\n\nodall <- \n    od2 %>% \n    inner_join(sf_stations, by=c(\"start_station_id\"=\"station_id\")) %>%\n    inner_join(sf_stations, by=c(\"end_station_id\"=\"station_id\"), suffix=c(\"\",\"_end\"))\n\n\nboundingbox <- c(left = -122.43, bottom = 37.76, right = -122.38, top = 37.81)"},{"path":"producing-maps-for-plotting.html","id":"answer-7","chapter":"6 Producing maps for plotting","heading":"6.1.2 Answer","text":"part () can use following code.part (b) can use following code.","code":"\nboundingbox <- c(left = -122.5, bottom = 37.25, right = -121.75, top = 38)\n\nmap <- get_map(boundingbox, zoom=9, source=\"stamen\")\n\nggmap(map) + \n    geom_point(data=stations, aes(x=long, y=lat,  colour=city)) +\n    xlab(\"Longitude\") + ylab(\"Latitude\") + \n    ggtitle(\"Bicycle stations in the San Francisco Bay Area\")\nlibrary(magrittr)\nboundingbox <- c(left = -122.43, bottom = 37.76, right = -122.38, top = 37.81)\nmap <- get_map(boundingbox, zoom=13, source=\"stamen\")\n\n\n\nggmap(map) + \n    geom_point(data=sf_stations, aes(long, lat, size=dockcount), col=\"orange\") +\n    geom_segment(data=odall, aes(long, lat, xend=long_end, yend=lat_end, alpha=ntrips), col=\"orange\")+\n    xlab(\"Longitude\") + ylab(\"Latitude\") + \n    ggtitle(\"Bicycle trips in San Francisco\")"},{"path":"producing-maps-for-plotting.html","id":"producing-maps-using-leaflet","chapter":"6 Producing maps for plotting","heading":"6.1.3 Producing maps using leaflet","text":"Maps plotted using ggmap panned zoomed like maps Google Maps OpenStreetMap. package leaflet allows . works somewhat way round ggmap: rather downloading map integrating R plot overlays data map interface.following command puts marker Radboud University located.argument urlTemplate required opening file locally.Leaflet map showing Radboud UniversityLines can added map using function addPolylines.data frame subway contains GPS coordinates subway stations Glasgow. can produce map Glasgow subway network using following code. (access data frame previous download).Leaflet map showing Glasgow Subway","code":"\nlibrary(leaflet)\nleaflet() %>%\n   addTiles(urlTemplate = \"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\") %>% \n   addMarkers(lng=5.862, lat=51.823, popup=\"Radboud University\")\nsubway2 <- rbind(subway, subway[1,])     # Make sure line goes back to Hillhead\nleaflet() %>%   \n   addTiles(urlTemplate = \"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\") %>% \n   addMarkers(lng=-4.2885, lat=55.8715, popup=\"The University of Glasgow\") %>%\n   addPolylines(subway2$long, subway2$lat, color=\"#ff6200\", opacity=0.5, weight=10) %>% \n   addCircleMarkers(subway$long, subway$lat, popup=subway$station, color=\"#ff6200\", \n                    opacity=1, fillColor=\"#4d4f53\", fillOpacity=1) "}]
